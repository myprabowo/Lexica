{
  "name": "Lexica",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.1,
      "position": [
        0,
        -410
      ],
      "id": "e73da9a7-2002-477c-95f3-92ac846cd7c7",
      "name": "Telegram Trigger",
      "webhookId": "e0e44645-6040-41c0-9523-b5b4ccf77bc9",
      "credentials": {
        "telegramApi": {
          "id": "7hlmCu84FwRjd3Ph",
          "name": "Telegram account 2"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Telegram Trigger').item.json.message.text }}",
        "options": {
          "systemMessage": "You are Lexica (Learning English eXperiences via Intelligent Conversational Agent), an AI English learning assistant integrated with CEFR (Common European Framework of Reference for Languages).\n\nYour personality is warm, supportive, and highly adaptive. You encourage users by celebrating their progress and suggesting personalized learning activities. You adjust your language complexity based on the user's CEFR level (A1 to C2) and always aim to make learning interactive, engaging, and confidence-building.\n\nYour primary goals are:\n1. To provide CEFR-aligned learning experiences tailored to the user's current level.\n2. To track and recall users‚Äô learning history to offer personalized practice and feedback.\n3. To motivate users with encouraging, empathetic, and non-judgmental communication.\n\nYou prefer simple, clear, and friendly English. When responding to beginners (A1‚ÄìA2), you use very basic sentences. With intermediate users (B1‚ÄìB2), you encourage light discussions and storytelling. For advanced users (C1‚ÄìC2), you promote critical thinking and nuanced language use.\n\nAlways act as a learning companion, not as an examiner. Your tone should feel like a knowledgeable but approachable tutor who celebrates every small achievement. If users make mistakes, correct them gently with brief explanations and examples.\n\nYou can communicate with the user in either English or Indonesian, depending on their preference or fluency. However, all learning tasks, prompts, exercises, and outputs must always be in English. When giving instructions or explanations, feel free to clarify in Indonesian if the user seems to need support, especially for lower CEFR levels (A1‚ÄìB1). For higher levels (B2‚ÄìC2), prioritize English-only interaction unless clarification is explicitly requested.\n\nWhen interacting with users, adapt your prompts and guidance based on their CEFR level:\n\nA1 (Beginner): Focus on basic vocabulary and simple sentence structures. Use high-frequency words, very short sentences, and offer translation support when needed.\nExample prompt: ‚ÄúWhat‚Äôs your favorite color? Can you write it in English?‚Äù\n\nA2 (Elementary): Introduce everyday expressions and simple past tense structures. Use short dialogues and basic functional phrases.\nExample prompt: ‚ÄúTell me about what you did last weekend.‚Äù\n\nB1 (Intermediate): Encourage storytelling and expressing opinions. Support the user with transition words and scaffolded sentence structures.\nExample prompt: ‚ÄúDescribe a memorable day in your life. Use ‚Äòfirst,‚Äô ‚Äòthen,‚Äô and ‚Äòfinally‚Äô.‚Äù\n\nB2 (Upper-Intermediate): Focus on building argumentation skills and extended discourse. Introduce light debate topics and abstract ideas.\nExample prompt: ‚ÄúDo you agree or disagree with online learning? Give at least two reasons.‚Äù\n\nC1 (Advanced): Engage users in critical thinking and the use of idiomatic language. Encourage nuanced explanations and complex grammar.\nExample prompt: ‚ÄúExplain the difference between ‚Äòhope‚Äô and ‚Äòwish‚Äô in different contexts.‚Äù\n\nC2 (Proficient): Challenge users with near-native fluency tasks. Include stylistic variation, academic writing, and contrast between formal/informal registers.\nExample prompt: ‚ÄúWrite a short essay discussing the impact of AI on language learning.‚Äù\n\nLimit each response to 100 words. If the answer exceeds this limit, offer the user the option to receive the next 100 words, and continue in chunks until the full response is delivered."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        440,
        -510
      ],
      "id": "647df429-1713-484a-a7f5-91c971fd6c7a",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        468,
        -290
      ],
      "id": "0293f666-edc1-47d6-8315-d11853ee4f4a",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "VDcxyYI6olfC1KSp",
          "name": "Google Gemini(PaLM) Api account 2"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "={{ $json.text + \"\\n üí°\"}}",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1256,
        -410
      ],
      "id": "f7268b3d-9e78-4a9d-8780-20d9c2035c10",
      "name": "Telegram",
      "webhookId": "958a6d46-4049-4dae-b8cb-d83d064b4578",
      "credentials": {
        "telegramApi": {
          "id": "7hlmCu84FwRjd3Ph",
          "name": "Telegram account 2"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.message.photo }}",
                    "rightValue": "",
                    "operator": {
                      "type": "array",
                      "operation": "exists",
                      "singleValue": true
                    },
                    "id": "d33985ba-a8e4-4e66-a1e8-9b3c0d3e3981"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Image"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "967d5deb-9bdf-44cc-8d6e-db143d474d5e",
                    "leftValue": "={{ $json.message.text }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Text"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "4e0f43e0-0a3b-4c96-ac9b-0474dd5ab40a",
                    "leftValue": "={{ $json.message.voice }}",
                    "rightValue": "",
                    "operator": {
                      "type": "object",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Audio"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        220,
        -410
      ],
      "id": "d19a5537-d071-4ff6-82a0-db42dce42c29",
      "name": "Switch"
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $('Get Image ID').item.json.image_file_id }}"
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        816,
        -660
      ],
      "id": "50c9c5b6-569c-4bca-81df-92f64ab37434",
      "name": "Telegram Get Image",
      "webhookId": "bc5ef2f4-853e-4bac-8aca-dff672b836c5",
      "credentials": {
        "telegramApi": {
          "id": "7hlmCu84FwRjd3Ph",
          "name": "Telegram account 2"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googlePalmApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"contents\": [{\n    \"parts\":[\n      {\"text\": \"{{ $json.prompt }}\"},\n      {\n        \"inline_data\": {\n          \"mime_type\": \"image/jpeg\",\n          \"data\": \"{{ $json.data }}\"\n        }\n      }\n    ]\n  }]\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1476,
        -760
      ],
      "id": "1853a189-20f9-4281-9e3c-99daee2d63d3",
      "name": "Call Gemini API",
      "credentials": {
        "googlePalmApi": {
          "id": "VDcxyYI6olfC1KSp",
          "name": "Google Gemini(PaLM) Api account 2"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "={{ $json.text + \"\\n üí°\" }}",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        2732,
        -760
      ],
      "id": "fc6c7eac-cf49-45ea-b220-72a69fac9309",
      "name": "Send Image Description",
      "webhookId": "db7bf4e6-0bc5-448a-a2a8-7fd941dbe160",
      "credentials": {
        "telegramApi": {
          "id": "7hlmCu84FwRjd3Ph",
          "name": "Telegram account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get the first output from the Telegram Trigger node\nconst telegramData = $('Telegram Trigger').first().json;\n\n// Extract the caption, if available\nconst caption = telegramData.message?.caption;\n\n// Return the appropriate prompt\nreturn [\n    {\n        json: {\n            prompt: caption ? caption : \"What's on this image?\"\n        }\n    }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1036,
        -860
      ],
      "id": "4e34a404-150b-4e56-ac9e-2085d3e9d995",
      "name": "Check Prompt"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        1256,
        -760
      ],
      "id": "d25cc7f2-3069-41bf-9877-398ab8731a52",
      "name": "Merge"
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $json.audio_file_id }}"
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        816,
        -110
      ],
      "id": "7f97734c-bc45-460b-848b-ea1be5bfc59b",
      "name": "Telegram Get Image1",
      "webhookId": "88b1afae-377b-4082-80d9-e80ebfcef057",
      "credentials": {
        "telegramApi": {
          "id": "7hlmCu84FwRjd3Ph",
          "name": "Telegram account 2"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googlePalmApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"contents\": [\n    {\n      \"parts\": [\n        {\"text\": \"Transcribe the audio and answer it if it looks like a prompt\"},\n        {\n          \"inline_data\": {\n            \"mime_type\": \"{{ $('Telegram Trigger').item.json.message.voice.mime_type }}\",\n            \"data\": \"{{ $json.data }}\"\n          }\n        }\n      ]\n    }\n  ]\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1256,
        -110
      ],
      "id": "77a91e1a-b2fb-4411-97a3-87515c7271fb",
      "name": "Call Gemini API1",
      "credentials": {
        "googlePalmApi": {
          "id": "VDcxyYI6olfC1KSp",
          "name": "Google Gemini(PaLM) Api account 2"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "dd4650ec-9c75-4d7e-9792-e4d765808c21",
              "name": "audio_file_id",
              "value": "={{ $json.message.voice.file_id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        518,
        -110
      ],
      "id": "896ab914-0023-4cec-9c54-37a8b11c8acf",
      "name": "Get File ID"
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "={{ $json.text + \"\\n üí°\"}}",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1994,
        -110
      ],
      "id": "ab6098c6-18d9-42f6-a1e4-9fce0f4690a8",
      "name": "Send Audio Transcript",
      "webhookId": "d3710ab9-b33e-4258-840b-8e27080c09d0",
      "credentials": {
        "telegramApi": {
          "id": "7hlmCu84FwRjd3Ph",
          "name": "Telegram account 2"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "dd4650ec-9c75-4d7e-9792-e4d765808c21",
              "name": "image_file_id",
              "value": "={{ $json.message.photo.last().file_id }}",
              "type": "string"
            },
            {
              "id": "7993507d-5a58-4bd7-936c-489254329e75",
              "name": "caption",
              "value": "={{ $json.message.caption }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        518,
        -760
      ],
      "id": "fae25cb6-24c9-4415-b932-ba41b19e3b14",
      "name": "Get Image ID"
    },
    {
      "parameters": {
        "operation": "binaryToPropery",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1036,
        -110
      ],
      "id": "35201401-b4ca-4a9d-bc55-aed8afaaca38",
      "name": "Extract Audio"
    },
    {
      "parameters": {
        "operation": "binaryToPropery",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1036,
        -660
      ],
      "id": "a0d0933e-05a1-46ed-880b-19b77932f926",
      "name": "Extract Image"
    },
    {
      "parameters": {
        "mode": "markdownToHtml",
        "markdown": "={{ $json.output }}",
        "options": {}
      },
      "type": "n8n-nodes-base.markdown",
      "typeVersion": 1,
      "position": [
        816,
        -410
      ],
      "id": "7e84ec62-63de-4fee-8156-a62e3c7871e9",
      "name": "Markdown"
    },
    {
      "parameters": {
        "mode": "markdownToHtml",
        "markdown": "={{ $json.output }}",
        "options": {}
      },
      "type": "n8n-nodes-base.markdown",
      "typeVersion": 1,
      "position": [
        2292,
        -760
      ],
      "id": "8ea43f07-faf1-4774-9b9d-022f16a22878",
      "name": "Markdown1"
    },
    {
      "parameters": {
        "jsCode": "function removeUnsupportedTelegramTags(htmlString) {\n  if (!htmlString) {\n    return \"\";\n  }\n\n  // Daftar tag HTML yang DIDUKUNG Telegram\n  const supportedTags = ['b', 'strong', 'i', 'em', 'code', 's', 'strike', 'del', 'u', 'pre'];\n\n  // Ekspresi reguler untuk mencari semua tag HTML\n  const tagRegex = /<(\\/?)([a-zA-Z0-9]+)[^>]*>/g;\n\n  return htmlString.replace(tagRegex, (match, closingSlash, tag) => {\n    const lowerCaseTag = tag.toLowerCase();\n    if (supportedTags.includes(lowerCaseTag)) {\n      // Untuk tag <pre>, kita perlu mempertahankan atribut 'language' jika ada\n      if (lowerCaseTag === 'pre') {\n        const languageMatch = match.match(/language=\"([^\"]*)\"/);\n        if (languageMatch) {\n          return match; // Kembalikan tag <pre> dengan atribut language\n        } else {\n          return `<${closingSlash}pre>`; // Kembalikan tag <pre> tanpa atribut\n        }\n      }\n      return match; // Biarkan tag yang didukung lainnya\n    } else {\n      return ''; // Hilangkan tag yang tidak didukung\n    }\n  });\n}\n\n// Ambil teks HTML dari item pertama input\nconst htmlInput = $input.first().json.data; // Ganti \"text\" dengan nama field yang berisi HTML kamu\n\n// Bersihkan teks HTML\nconst cleanedHtml = removeUnsupportedTelegramTags(htmlInput);\n\n// Kembalikan teks yang sudah dibersihkan\nreturn [{ json: { text: cleanedHtml } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1036,
        -410
      ],
      "id": "5c65710f-3c80-42f8-9963-65fe6710c296",
      "name": "Clean HTML-Text"
    },
    {
      "parameters": {
        "jsCode": "function removeUnsupportedTelegramTags(htmlString) {\n  if (!htmlString) {\n    return \"\";\n  }\n\n  // Daftar tag HTML yang DIDUKUNG Telegram\n  const supportedTags = ['b', 'strong', 'i', 'em', 'code', 's', 'strike', 'del', 'u', 'pre'];\n\n  // Ekspresi reguler untuk mencari semua tag HTML\n  const tagRegex = /<(\\/?)([a-zA-Z0-9]+)[^>]*>/g;\n\n  return htmlString.replace(tagRegex, (match, closingSlash, tag) => {\n    const lowerCaseTag = tag.toLowerCase();\n    if (supportedTags.includes(lowerCaseTag)) {\n      // Untuk tag <pre>, kita perlu mempertahankan atribut 'language' jika ada\n      if (lowerCaseTag === 'pre') {\n        const languageMatch = match.match(/language=\"([^\"]*)\"/);\n        if (languageMatch) {\n          return match; // Kembalikan tag <pre> dengan atribut language\n        } else {\n          return `<${closingSlash}pre>`; // Kembalikan tag <pre> tanpa atribut\n        }\n      }\n      return match; // Biarkan tag yang didukung lainnya\n    } else {\n      return ''; // Hilangkan tag yang tidak didukung\n    }\n  });\n}\n\n// Ambil teks HTML dari item pertama input\nconst htmlInput = $input.first().json.data; // Ganti \"text\" dengan nama field yang berisi HTML kamu\n\n// Bersihkan teks HTML\nconst cleanedHtml = removeUnsupportedTelegramTags(htmlInput);\n\n// Kembalikan teks yang sudah dibersihkan\nreturn [{ json: { text: cleanedHtml } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2512,
        -760
      ],
      "id": "e22ec439-d9b1-420a-adc4-5c532a40353e",
      "name": "Clean HTML-Image"
    },
    {
      "parameters": {
        "mode": "markdownToHtml",
        "markdown": "={{ $json.candidates[0].content.parts[0].text }}",
        "options": {}
      },
      "type": "n8n-nodes-base.markdown",
      "typeVersion": 1,
      "position": [
        1476,
        -110
      ],
      "id": "d9c779c1-ab9b-4eda-a537-a071f03de97c",
      "name": "Markdown2"
    },
    {
      "parameters": {
        "jsCode": "function removeUnsupportedTelegramTags(htmlString) {\n  if (!htmlString) {\n    return \"\";\n  }\n\n  // Daftar tag HTML yang DIDUKUNG Telegram\n  const supportedTags = ['b', 'strong', 'i', 'em', 'code', 's', 'strike', 'del', 'u', 'pre'];\n\n  // Ekspresi reguler untuk mencari semua tag HTML\n  const tagRegex = /<(\\/?)([a-zA-Z0-9]+)[^>]*>/g;\n\n  return htmlString.replace(tagRegex, (match, closingSlash, tag) => {\n    const lowerCaseTag = tag.toLowerCase();\n    if (supportedTags.includes(lowerCaseTag)) {\n      // Untuk tag <pre>, kita perlu mempertahankan atribut 'language' jika ada\n      if (lowerCaseTag === 'pre') {\n        const languageMatch = match.match(/language=\"([^\"]*)\"/);\n        if (languageMatch) {\n          return match; // Kembalikan tag <pre> dengan atribut language\n        } else {\n          return `<${closingSlash}pre>`; // Kembalikan tag <pre> tanpa atribut\n        }\n      }\n      return match; // Biarkan tag yang didukung lainnya\n    } else {\n      return ''; // Hilangkan tag yang tidak didukung\n    }\n  });\n}\n\n// Ambil teks HTML dari item pertama input\nconst htmlInput = $input.first().json.data; // Ganti \"text\" dengan nama field yang berisi HTML kamu\n\n// Bersihkan teks HTML\nconst cleanedHtml = removeUnsupportedTelegramTags(htmlInput);\n\n// Kembalikan teks yang sudah dibersihkan\nreturn [{ json: { text: cleanedHtml } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1696,
        -110
      ],
      "id": "f8235ebd-9927-48ea-8525-8f51bc9802f0",
      "name": "Clean HTML-Audio"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json }}",
        "options": {
          "systemMessage": "Repeat only the content of assistant message as it is."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        1920,
        -760
      ],
      "id": "5a9e6cc0-d8bd-408e-80bd-5f5c25b15744",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1944,
        -540
      ],
      "id": "977103e1-864f-4241-96bd-87f51ba27c1a",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "VDcxyYI6olfC1KSp",
          "name": "Google Gemini(PaLM) Api account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const textFromRequest = $input.first().json.candidates[0].content.parts[0].text;\nreturn [{ json: { role: \"assistant\", content: textFromRequest } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1696,
        -760
      ],
      "id": "a6ee35ef-ea1b-415d-94a8-fc74a962fab1",
      "name": "Assistant"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "contextWindowLength": 10
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        640,
        -300
      ],
      "id": "994d6f68-6a7c-48f4-97c2-ad650ef727c2",
      "name": "Postgres Chat Memory",
      "credentials": {
        "postgres": {
          "id": "Yyhlz9xpZGYyYP77",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "contextWindowLength": 10
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        2120,
        -540
      ],
      "id": "48c210b5-161b-4b73-961c-ffab39c3d60d",
      "name": "Postgres Chat Memory1",
      "credentials": {
        "postgres": {
          "id": "Yyhlz9xpZGYyYP77",
          "name": "Postgres account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Markdown",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Get Image ID",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get File ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Get Image": {
      "main": [
        [
          {
            "node": "Extract Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Gemini API": {
      "main": [
        [
          {
            "node": "Assistant",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Prompt": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Call Gemini API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Get Image1": {
      "main": [
        [
          {
            "node": "Extract Audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Gemini API1": {
      "main": [
        [
          {
            "node": "Markdown2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get File ID": {
      "main": [
        [
          {
            "node": "Telegram Get Image1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Image ID": {
      "main": [
        [
          {
            "node": "Check Prompt",
            "type": "main",
            "index": 0
          },
          {
            "node": "Telegram Get Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Audio": {
      "main": [
        [
          {
            "node": "Call Gemini API1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Image": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Markdown": {
      "main": [
        [
          {
            "node": "Clean HTML-Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Markdown1": {
      "main": [
        [
          {
            "node": "Clean HTML-Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clean HTML-Text": {
      "main": [
        [
          {
            "node": "Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clean HTML-Image": {
      "main": [
        [
          {
            "node": "Send Image Description",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Markdown2": {
      "main": [
        [
          {
            "node": "Clean HTML-Audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clean HTML-Audio": {
      "main": [
        [
          {
            "node": "Send Audio Transcript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "Markdown1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Assistant": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory1": {
      "ai_memory": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {},
  "versionId": "e0f13352-abcd-4fdd-9fc9-71933a39ca80",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "6ad960fd1c726484d330685b864ce535a6d2dbd3a547d86fe0ecaf108ac62dbf"
  },
  "id": "EcZgeZx9QjCwmbxc",
  "tags": []
}